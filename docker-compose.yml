version: '1.0'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}
#    ipam:
#      config:
#        - subnet: 172.20.0.0/16
services:

  node14.9.0: # 自定义容器名称 要删除node_modules和package-lock.json
    build:
      context: ./build/node:14.9.0                 # 指定构建使用的 Dockerfile 文件
    privileged: true
    working_dir: /root/src/admin-web.zwo.biz
    volumes: # 设置挂载目录
      - ${CODE_PATH_HOST}:/root/src  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
      - ${NODEJS_LOGS}:/var/log/nodejs
    ports: # 设置端口映射
      - "9527:9527"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  golang1.17: # 自定义容器名称
    build:
      context: ./build/golang:1.17                 # 指定构建使用的 Dockerfile 文件
    environment: # 设置环境变量
      - TZ=${TZ}
    working_dir: /go/src/zwoastro
    privileged: true
    volumes: # 设置挂载目录
      - /Users/zhouwenzhe/go/pkg:/go/pkg
      - ${CODE_PATH_HOST}:/go/src  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
      - ${GOLANG_LOGS}:/var/log/golang
    ports:                               # 设置端口映射
       - "8000:8000"
      # - "8101:8101"
      # - "8102:8102"
      # - "8103:8103"
      # - "9600:9600"
      # - "9601:9601"
      # - "9602:9602"
      # - "9603:9603"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启
    platform: linux/x86_64

    # wordpress:
    # build:
    #   context: ./build/wordpress
    # environment:
    #   WORDPRESS_DB_HOST: mysql
    #   WORDPRESS_DB_USER: root
    #   WORDPRESS_DB_PASSWORD: dqFr1kBmbfVq5jQB
    #   WORDPRESS_DB_NAME: zwo_astro
    # volumes:
    #   - "${CODE_PATH_HOST}/zwoastro.com:/var/www/html"
    # privileged: true
    # networks:
    #   - backend
    # restart: always

  mysql8.0:
    build:
      context: ./build/mysql:8.0
    environment:
      - TZ=${TZ}
#      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
#      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    command:
#      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    ports:
      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis6.2.5:
    build:
      context: ./build/redis:6.2.5
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    environment:
      # 时区上海
      - TZ=${TZ}
    volumes:
      # 数据文件
      - ${DATA_PATH_HOST}/redis:/data:rw
    command: "redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes"
    privileged: true
    networks:
      - backend
    restart: always

  # redis-manage:
  #   build:
  #     context: ./build/redis-manage
  #   environment:
  #     - TZ=${TZ}
  #     - ADMIN_USER=${REDIS_MANAGE_USERNAME}           # 设置 Redis 可视化管理的用户名称
  #     - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}           # 设置 Redis 可视化管理的用户密码
  #     - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}     # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
  #     - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}     # 设置连接的 Redis 服务端口号
  #   ports:
  #     - "${REDIS_MANAGE_PORT}:80"                     # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
  #   depends_on:                                       # 依赖容器
  #     - redis                                         # 在 Redis 服务容器启动后启动
  #   networks:
  #     - backend
  #   restart: always

  php7.4-fpm:
    build:
      context: ./build/php:7.4-fpm
    ports:
      - "${PHPFPM_PORT}:9000"
      # - "9500:9500"
      # - "9501:9501"
      # - "9502:9502"
      # - "9503:9503"
    environment: # 设置环境变量
      - TZ=${TZ}
    volumes:
      - ${CODE_PATH_HOST}:/var/www/html
      - ${PHP_FPM_LOGS}:/usr/local/var/log
    extra_hosts:
      - "zwoastro.zwo.biz:172.17.0.1"
    privileged: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  nginx1.21.6:
    build:
      context: ./build/nginx:1.21.6
    ports:
      - "80:80"
      - "8888:8081"
      # - "8360:8360"
    environment: # 设置环境变量
      - TZ=${TZ}
    volumes:
      - ${NGINX_CONF}:/etc/nginx/nginx.conf:ro
      - ${NGINX_CONF_PATH}:/etc/nginx/conf.d
      - ${NGINX_LOGS_PATH}:/var/log/nginx
      - ${CODE_PATH_HOST}:/usr/share/nginx/html
    privileged: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  ubuntu20.04:
    build:
      context: ./build/ubuntu:20.04
#    ports:
##      - "8000:8000"
#      - "23:22"

    volumes:
      - ${CODE_PATH_HOST}:/root/src
#      - ${NOVA_LOGS_PATH}:/data/logs/nova/nova.log
    command: [ "sleep","infinity" ]
    privileged: true
    networks:
      - backend
    restart: always
#  #jaeger链路追踪
#  jaeger:
#    image: jaegertracing/all-in-one:latest
#    container_name: zwoastro-jaeger
#    restart: always
#    ports:
#      - "5775:5775/udp"
#      - "6831:6831/udp"
#      - "6832:6832/udp"
#      - "5778:5778"
#      - "16686:16686"
#      - "14268:14268"
#      - "9411:9411"
#    environment:
#      - SPAN_STORAGE_TYPE=elasticsearch
#      - ES_SERVER_URLS=http://elasticsearch:9200
#      - LOG_LEVEL=debug
#    networks:
#      - backend
#
#  #elasticsearch
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
#    container_name: zwoastro-elasticsearch
#    user: root
#    environment:
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - TZ=${TZ}
#    volumes:
#      - ${DATA_PATH_HOST}/elasticsearch/data:/usr/share/elasticsearch/data
#    restart: always
#    ports:
#      - 9200:9200
#      - 9300:9300
#    networks:
#      - backend
#
#  #查看elasticsearch数据
#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.13.4
#    container_name: zwoastro-kibana
#    environment:
#      - elasticsearch.hosts=http://elasticsearch:9200
#      - TZ=${TZ}
#    restart: always
#    networks:
#      - backend
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#
#  #消费kafka中filebeat收集的数据输出到es
#  go-stash:
#    #image: kevinwan/go-stash:1.0 # if you "macOs intel" or "linux amd"
#    image: kevinwan/go-stash:1.0-arm64 #  if you "macOs m1" or "linux arm"
#    container_name: zwoastro-go-stash
#    environment:
#      - TZ=${TZ}
#    user: root
#    restart: always
#    volumes:
#      - ./build/deploy/go-stash/etc:/app/etc
#    networks:
#      - backend
#    depends_on:
#      - elasticsearch
#      - kafka
#
#  #收集业务数据
#  filebeat:
#    image: elastic/filebeat:7.13.4
#    container_name: zwoastro-filebeat
#    environment:
#      # 时区上海
#      - TZ=${TZ}
#    user: root
#    restart: always
#    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题
#    volumes:
#      - ./build/deploy/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
#      # 此处需指定docker的containers目录，取决于你docker的配置
#      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers
#      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
#      #- /var/lib/docker/containers:/var/lib/docker/containers
#      - ${LOG_PATH}:/var/log/message
#    networks:
#      - backend
#    depends_on:
#      - kafka
#
#  #zookeeper是kafka的依赖
#  zookeeper:
#    image: wurstmeister/zookeeper
#    container_name: zwoastro-zookeeper
#    environment:
#      # 时区上海
#      - TZ=${TZ}
#    restart: always
#    ports:
#      - 2181:2181
#    networks:
#      - backend
#
#  #消息队列
#  kafka:
#    image: wurstmeister/kafka
#    container_name: zwoastro-kafka
#    ports:
#      - 9092:9092
#    environment:
#      - KAFKA_ADVERTISED_HOST_NAME=zwoastro-kafka
#      - KAFKA_ZOOKEEPER_CONNECT=zwoastro-zookeeper:2181
#      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
#      - TZ=${TZ}
#    restart: always
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - backend
#    depends_on:
#      - zookeeper
#
#  #prometheus监控
#  prometheus:
#    image: prom/prometheus:v2.28.1
#    container_name: zwoastro-prometheus
#    environment:
#      # 时区上海
#      - TZ=${TZ}
#    volumes:
#      - ./build/deploy/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml
#      - ${DATA_PATH_HOST}/prometheus/data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#    restart: always
#    user: root
#    ports:
#      - 9090:9090
#    networks:
#      - backend
#
#  #查看prometheus监控数据
#  grafana:
#    image: grafana/grafana:8.0.6
#    container_name: zwoastro-grafana
#    hostname: grafana
#    user: root
#    environment:
#      # 时区上海
#      - TZ=${TZ}
#    restart: always
#    volumes:
#      - ${DATA_PATH_HOST}/grafana/data:/var/lib/grafana
#    ports:
#      - "3000:3000"
#    networks:
#      - backend
#
#  #asynqmon asynq延迟队列、定时队列的webui
#  asynqmon:
#    image: hibiken/asynqmon:latest
#    container_name: zwoastro-asynqmon
#    ports:
#      - 8980:8080
#    command:
#      - '--redis-addr=redis:${REDIS_PORT}'
#      - '--redis-password=${REDIS_PASSWORD}'
#    restart: always
#    networks:
#      - backend
#    depends_on:
#      - redis6.2.5
