version: '1.0'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:

  nodejs:                                # 自定义容器名称
    build:
      context: ./nodejs                 # 指定构建使用的 Dockerfile 文件
    privileged: true
    volumes:                             # 设置挂载目录
      - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
      - ${GOLANG_LOGS}:/var/log/nodejs
    ports:                               # 设置端口映射
      - "9700:9700"
      - "9701:9701"
      - "9702:9702"
      - "9703:9703"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  golang:                                # 自定义容器名称
    build:
      context: ./golang                 # 指定构建使用的 Dockerfile 文件
    environment:                         # 设置环境变量
      - TZ=${TZ}
    privileged: true
    volumes:                             # 设置挂载目录
      - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
      - ${GOLANG_LOGS}:/var/log/golang
    ports:                               # 设置端口映射
      - "8100:8100"
      - "8101:8101"
      - "8102:8102"
      - "8103:8103"
      - "9600:9600"
      - "9601:9601"
      - "9602:9602"
      - "9603:9603"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  wordpress:
    build: 
      context: ./wordpress
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: dqFr1kBmbfVq5jQB
      WORDPRESS_DB_NAME: zwo_astro
    volumes:
      - "${CODE_PATH_HOST}/zwoastro.com:/var/www/html"
    privileged: true
    networks:
      - backend
    restart: always

  mysql:
    build:
      context: ./mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    ports:
      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis:
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis-manage:
    build:
      context: ./redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}           # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}           # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}     # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}     # 设置连接的 Redis 服务端口号
    ports:
      - "${REDIS_MANAGE_PORT}:80"                     # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - redis                                         # 在 Redis 服务容器启动后启动
    networks:
      - backend
    restart: always

  php-fpm:
    build:
      context: ./php-fpm
    ports:
      - "${PHPFPM_PORT}:9000"
      - "9500:9500"
      - "9501:9501"
      - "9502:9502"
      - "9503:9503"
      - "8000:8000"
    volumes:
      - ${CODE_PATH_HOST}:/var/www/html
      - ${PHP_FPM_LOGS}:/usr/local/var/log
    extra_hosts:
      - "zwoastro.zwo.biz:172.17.0.1"
    privileged: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "8360:8360"
    volumes:
      - ${NGINX_CONF}:/etc/nginx/nginx.conf:ro
      - ${NGINX_CONF_PATH}:/etc/nginx/conf.d
      - ${NGINX_LOGS_PATH}:/var/log/nginx
      - ${CODE_PATH_HOST}:/usr/share/nginx/html
    privileged: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启